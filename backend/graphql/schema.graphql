"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
    
    task(id: ID!): Task  @find 
    tasks: [Task!]! @field(resolver: "App\\GraphQL\\Queries\\TaskQueries")
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    username: String!
    password: String!
    role: String!
    profile_picture: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Task {
    _id: ID!
    admin_id: ID
    task_name: String!
    category: String!
    status: String!
    task_description: String!
     end_date: String
}

type AuthUserPayload {
    token: String
    user: User
}

type LogoutPayload {
    message: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type DeleteTaskResponse {
  message: String!
}

input TaskInput {
  task_name: String
  category: String
  status: String
  task_description: String
  end_date: String
}

type Mutation {
    registerUser(username: String!, email: String!, password: String!, role: String!, profile_picture: String!): User!
    loginUser(email: String!, password: String!): AuthUserPayload
     logoutUser: LogoutPayload!
    createTask(task_name: String!, category: String!, status: String!, task_description: String!, end_date: String): Task!
     updateTask(id: ID!, input: TaskInput!): Task!
     deleteTask(id: ID!): DeleteTaskResponse!
}
